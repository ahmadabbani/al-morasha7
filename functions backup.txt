login: import pool from "../utils/db.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { serialize } from "cookie";
import dotenv from "dotenv";
dotenv.config();
// Allow specific origin (not wildcard)
const allowedOrigins = [
  "http://localhost:5173", // frontend URL
  "https://al-morasha7.vercel.app", // Production frontend URL
];

export default async function handler(req, res) {
  // Get the origin from the request
  const origin = req.headers.origin;
  // Set CORS headers conditionally
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  res.setHeader("Access-Control-Allow-Credentials", "true"); // Add this
  res.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // Handle preflight (OPTIONS) request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  if (req.method !== "POST") {
    return res.status(405).json({ error: "الطريقة غير مسموح بها" });
  }

  const { emailOrPhone, password } = req.body;

  // Basic validation
  if (!emailOrPhone || !password) {
    return res.status(400).json({ error: "جميع الحقول مطلوبة" });
  }

  try {
    const client = await pool.connect();

    try {
      // Find user by email or phone
      const user = await client.query(
        `SELECT id, name, email, password, phone, status, district, role, "isAdmin", "isPayed", is_verified,
         session_date::date as session_date,
              to_char(session_time, 'HH24:MI') as session_time 
       FROM users WHERE email = $1 OR phone = $1`,
        [emailOrPhone]
      );

      if (user.rows.length === 0) {
        return res
          .status(404)
          .json({ error: "البريد الإلكتروني أو الهاتف غير موجود" });
      }

      // Check if email is verified
      if (!user.rows[0].is_verified) {
        return res.status(403).json({
          error:
            "لم يتم التحقق من بريدك الإلكتروني، يرجى التحقق من بريدك الإلكتروني وانقر على رابط التحقق",
          needsVerification: true,
          userId: user.rows[0].id,
        });
      }

      // Compare passwords
      const validPassword = await bcrypt.compare(
        password,
        user.rows[0].password
      );
      if (!validPassword) {
        return res.status(401).json({ error: "كلمة المرور غير صحيحة" });
      }

      // Generate JWT
      const token = jwt.sign(
        {
          id: user.rows[0].id,
          name: user.rows[0].name,
          status: user.rows[0].status,
        },
        process.env.JWT_SECRET, // Add this to your Vercel environment variables
        { expiresIn: "4h" } // Token expires in 4 hour
      );

      // Set JWT in HTTP-only cookie
      res.setHeader(
        "Set-Cookie",
        serialize("token", token, {
          httpOnly: true,
          path: "/",
          sameSite: "lax",
          secure: process.env.NODE_ENV === "production", // Secure in production
          maxAge: 8 * 3600, // 8 hours in seconds
        })
      );

      // Return non-sensitive user data
      return res.status(200).json({
        message: "تم تسجيل الدخول بنجاح",
        user: {
          id: user.rows[0].id,
          name: user.rows[0].name,
          email: user.rows[0].email,
          phone: user.rows[0].phone,
          status: user.rows[0].status,
          district: user.rows[0].district,
          role: user.rows[0].role,
          session_date: user.rows[0].session_date,
          session_time: user.rows[0].session_time,
          isPayed: user.rows[0].isPayed,
          isAdmin: user.rows[0].isAdmin,
        },
      });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({
      error: "حدث خطأ أثناء تسجيل الدخول",
      details: error.message,
    });
  }
}

register: import pool from "../utils/db.js";
import bcrypt from "bcrypt";
import crypto from "crypto";
import { sendVerificationEmail } from "../utils/emailService.js";

// Error messages in Arabic
const errors = {
  METHOD_NOT_ALLOWED: "الطريقة غير مسموح بها",
  FIELDS_REQUIRED: "جميع الحقول مطلوبة",
  USER_EXISTS: "البريد الإلكتروني أو الهاتف موجود مسبقاً",
  REGISTRATION_FAILED: "فشل التسجيل",
  EMAIL_FAILED: "تم التسجيل ولكن فشل إرسال بريد التحقق",
};

// Success message in Arabic
const success = {
  REGISTRATION_SUCCESS:
    "تم التسجيل بنجاح، يرجى التحقق من بريدك الإلكتروني لتأكيد حسابك",
};
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*"); // Allow all origins (or specify the exact frontend URL)
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") {
    return res.status(200).end(); // Handle preflight request
  }
  if (req.method !== "POST") {
    return res.status(405).json({ error: errors.METHOD_NOT_ALLOWED });
  }

  const { name, phone, email, district, role, password } = req.body;

  // Basic validation
  if (!name || !phone || !email || !district || !role || !password) {
    return res.status(400).json({ error: errors.FIELDS_REQUIRED });
  }

  try {
    const client = await pool.connect();

    try {
      // Check for existing user
      const existingUser = await client.query(
        "SELECT * FROM users WHERE email = $1 OR phone = $2",
        [email, phone]
      );

      if (existingUser.rows.length > 0) {
        return res.status(409).json({ error: errors.USER_EXISTS });
      }

      // Hash password
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Generate verification token
      const verificationToken = crypto.randomBytes(32).toString("hex");

      // Set token expiry time (24 hours from now)
      const tokenExpiry = new Date();
      tokenExpiry.setHours(tokenExpiry.getHours() + 24);

      // Insert new user
      await client.query(
        `INSERT INTO users 
        (name, phone, email, district, role, password, session_date, session_time, verification_token, token_expiry, is_verified, email_verified_at) 
        VALUES ($1, $2, $3, $4, $5, $6, NULL, NULL, $7, $8, false, NULL)`,
        [
          name,
          phone,
          email,
          district,
          role,
          hashedPassword,
          verificationToken,
          tokenExpiry,
        ]
      );

      // Send verification email
      const emailResult = await sendVerificationEmail(
        email,
        name,
        verificationToken
      );

      if (!emailResult.success) {
        console.error("Failed to send verification email:", emailResult.error);
        return res.status(201).json({
          message: errors.EMAIL_FAILED,
          userId: emailResult.userId,
        });
      }

      return res.status(201).json({ message: success.REGISTRATION_SUCCESS });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Registration error:", error);
    return res.status(500).json({
      error: errors.REGISTRATION_FAILED,
      details: error.message,
    });
  }
}

logout:// api/users/logout.js
import { serialize } from "cookie";
// Allowed origins (update with your domains)
const allowedOrigins = [
  "http://localhost:5173", // Local development
  // Production
];
export default async function handler(req, res) {
  //remove when deploy as both frontend and back are on vercel same domain (not interact also with railway db)
  // Set CORS headers dynamically
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
    res.setHeader("Access-Control-Allow-Credentials", "true");
  }
  res.setHeader("Access-Control-Allow-Methods", "POST");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // Handle preflight request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  // Clear the token cookie
  res.setHeader(
    "Set-Cookie",
    serialize("token", "", {
      httpOnly: true,
      path: "/",
      expires: new Date(0), // Set expiration to a past date
      sameSite: "lax",
      secure: process.env.NODE_ENV === "production",
    })
  );

  return res.status(200).json({ message: "تم تسجيل الخروج بنجاح" });
}

me: // api/users/me.js
import pool from "../utils/db.js";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
dotenv.config();

// Allowed origins (update with your domains)
const allowedOrigins = [
  "http://localhost:5173", // Local development
  // Production url
];
export default async function handler(req, res) {
  // Set CORS headers dynamically
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
    res.setHeader("Access-Control-Allow-Credentials", "true");
  }
  res.setHeader("Access-Control-Allow-Methods", "GET");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // Handle preflight request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  // Verify token from cookie
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({ error: "غير مصرح به" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Fetch user from DB
    const user = await pool.query(
      `SELECT id, name, email, phone, status, district, role, "isAdmin", "isPayed", session_date::date as session_date,
              to_char(session_time, 'HH24:MI') as session_time 
       FROM users WHERE id = $1`,
      [decoded.id]
    );

    if (user.rows.length === 0) {
      return res.status(404).json({ error: "المستخدم غير موجود" });
    }

    return res.status(200).json(user.rows[0]);
  } catch (error) {
    return res.status(401).json({ error: "جلسة غير صالحة" });
  }
}


resend-verification: // api/users/resend-verification.js
import pool from "../utils/db.js";
import crypto from "crypto";
import { sendVerificationEmail } from "../utils/emailService.js";

// Error and success messages in Arabic
const errors = {
  METHOD_NOT_ALLOWED: "الطريقة غير مسموح بها",
  EMAIL_REQUIRED: "البريد الإلكتروني مطلوب",
  USER_NOT_FOUND: "لم يتم العثور على المستخدم",
  ALREADY_VERIFIED: "تم التحقق من البريد الإلكتروني بالفعل",
  EMAIL_FAILED: "فشل إرسال بريد التحقق",
};

const success = {
  EMAIL_SENT: "تم إرسال رابط التحقق، يرجى التحقق من بريدك الإلكتروني",
};

export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  if (req.method !== "POST") {
    return res.status(405).json({ error: errors.METHOD_NOT_ALLOWED });
  }

  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ error: errors.EMAIL_REQUIRED });
  }

  try {
    const client = await pool.connect();

    try {
      // Find user by email
      const result = await client.query(
        "SELECT * FROM users WHERE email = $1",
        [email]
      );

      if (result.rows.length === 0) {
        return res.status(404).json({ error: errors.USER_NOT_FOUND });
      }

      const user = result.rows[0];

      // Check if already verified
      if (user.is_verified) {
        return res.status(400).json({ error: errors.ALREADY_VERIFIED });
      }

      // Generate new verification token
      const verificationToken = crypto.randomBytes(32).toString("hex");

      // Set token expiry time (24 hours from now)
      const tokenExpiry = new Date();
      tokenExpiry.setHours(tokenExpiry.getHours() + 24);

      // Update user with new verification token
      await client.query(
        `UPDATE users 
         SET verification_token = $1, 
             token_expiry = $2
         WHERE id = $3`,
        [verificationToken, tokenExpiry, user.id]
      );

      // Send verification email
      const emailResult = await sendVerificationEmail(
        user.email,
        user.name,
        verificationToken
      );

      if (!emailResult.success) {
        return res.status(500).json({
          error: errors.EMAIL_FAILED,
          details: emailResult.error,
        });
      }

      return res.status(200).json({ message: success.EMAIL_SENT });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Resend verification error:", error);
    return res.status(500).json({
      error: errors.EMAIL_FAILED,
      details: error.message,
    });
  }
}


verify:// api/users/verify.js
import pool from "../utils/db.js";
const allowedOrigins = [
  "http://localhost:5173", // Frontend URL during development
  // Add production domain when deploying
];
// Error and success messages in Arabic
const errors = {
  METHOD_NOT_ALLOWED: "الطريقة غير مسموح بها",
  TOKEN_REQUIRED: "رمز التحقق مطلوب",
  TOKEN_INVALID: "رمز التحقق غير صالح أو منتهي الصلاحية",
  VERIFICATION_FAILED: "فشل التحقق من البريد الإلكتروني",
};

const success = {
  VERIFICATION_SUCCESS: "تم التحقق من البريد الإلكتروني بنجاح",
};

export default async function handler(req, res) {
  // Get the origin from the request
  const origin = req.headers.origin;
  console.log("Request origin:", origin); // Log the incoming origin
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  if (req.method !== "GET" && req.method !== "POST" && req.method !== "PUT") {
    return res.status(405).json({ error: errors.METHOD_NOT_ALLOWED });
  }

  // Get token from query params (GET) or request body (POST)
  const token = req.method === "PUT" ? req.query.token : req.body.token;

  if (!token) {
    return res.status(400).json({ error: errors.TOKEN_REQUIRED });
  }

  try {
    const client = await pool.connect();

    try {
      // Find user with this verification token and check if it's still valid
      const currentTime = new Date();
      const result = await client.query(
        `SELECT * FROM users 
         WHERE verification_token = $1 
         AND token_expiry > $2 
         AND is_verified = false`,
        [token, currentTime]
      );

      if (result.rows.length === 0) {
        return res.status(400).json({ error: errors.TOKEN_INVALID });
      }

      // Update user to verified status
      await client.query(
        `UPDATE users 
         SET is_verified = true, 
             email_verified_at = $1, 
             verification_token = NULL, 
             token_expiry = NULL 
         WHERE verification_token = $2`,
        [currentTime, token]
      );
      return res.status(200).json({ message: success.VERIFICATION_SUCCESS });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Email verification error:", error);
    return res.status(500).json({
      error: errors.VERIFICATION_FAILED,
      details: error.message,
    });
  }
}


acceptSession: 
// Get all users endpoint and accept a session endpoint
import pool from "../utils/db.js";
import { requireAdmin } from "../utils/auth.js";
import dotenv from "dotenv";
dotenv.config();
// Allowed origins (update with your domains)
const allowedOrigins = [
  "http://localhost:5173", // Local development
  // Production url
];
export default async function handler(req, res) {
  // Set CORS headers dynamically
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
    res.setHeader("Access-Control-Allow-Credentials", "true");
  }
  res.setHeader("Access-Control-Allow-Methods", "GET, PUT");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  // Handle preflight request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  // First, validate admin status
  try {
    await requireAdmin(req, res);
  } catch (error) {
    if (error.message === "Unauthorized") {
      return res.status(401).json({ error: "Unauthorized" });
    } else if (error.message === "Forbidden") {
      return res.status(403).json({ error: "Forbidden" });
    } else {
      return res.status(500).json({ error: "Internal server error" });
    }
  }

  if (req.method === "GET") {
    try {
      const client = await pool.connect();
      try {
        const users = await client.query(`
            SELECT 
              id,
              name,
              phone,
              email,
              district,
              role,
              status,
              "isPayed",
              session_date::date as session_date,
              to_char(session_time, 'HH24:MI') as session_time,
              created_at
            FROM users
            WHERE "isAdmin" = false
            ORDER BY created_at DESC
          `);

        return res.status(200).json(users.rows);
      } finally {
        client.release();
      }
    } catch (error) {
      console.error("Error fetching users:", error);
      return res.status(500).json({ error: "Internal server error" });
    }
  }

  if (req.method === "PUT") {
    const { userId } = req.body;

    try {
      const client = await pool.connect();
      try {
        await client.query("UPDATE users SET status = true WHERE id = $1", [
          userId,
        ]);

        return res
          .status(200)
          .json({ message: "User status updated successfully" });
      } finally {
        client.release();
      }
    } catch (error) {
      console.error("Error updating user status:", error);
      return res.status(500).json({ error: "Internal server error" });
    }
  }

  return res.status(405).json({ error: "Method not allowed" });
}


blogs:
import pool from "../utils/db.js";

const allowedOrigins = [
  "http://localhost:5173",
  // Add production domain here, e.g., "https://your-app.vercel.app"
];

export default async function handler(req, res) {
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  if (req.method !== "GET") {
    return res.status(405).json({ error: "الطريقة غير مسموح بها" });
  }

  try {
    const client = await pool.connect();
    const result = await client.query("SELECT * FROM blogs ORDER BY id DESC"); // Fetch all blogs, ordered by most recent
    client.release();

    res.status(200).json(result.rows); // Return the array of blog objects
  } catch (error) {
    console.error("Database error:", error);
    res.status(500).json({ error: "حدث خطأ أثناء جلب المدونات" });
  }
}


createBlog:
import pool from "../utils/db.js";
import dotenv from "dotenv";
import formidable from "formidable";
import { v2 as cloudinary } from "cloudinary";

dotenv.config();

// Configure Cloudinary with environment variables
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});
const allowedOrigins = [
  "http://localhost:5173",
  // Add production domain
];

export default async function handler(req, res) {
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Methods", "POST");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  if (req.method !== "POST") {
    return res.status(405).json({ error: "الطريقة غير مسموح بها" });
  }

  const form = formidable({ multiples: false }); // Single file upload

  try {
    const [fields, files] = await form.parse(req);

    const { title, description } = fields;
    const image = files.image?.[0]; // formidable returns an array for each field

    if (!title?.[0] || !description?.[0] || !image) {
      return res.status(400).json({ error: "جميع الحقول مطلوبة" });
    }

    // Upload image to Cloudinary
    const uploadResult = await cloudinary.uploader.upload(image.filepath, {
      folder: "blogs", // Optional: organize images in a 'blogs' folder in Cloudinary
      public_id: `${Date.now()}-${image.originalFilename.split(".")[0]}`, // Unique name
    });

    const imageUrl = uploadResult.secure_url; // Get the secure URL from Cloudinary

    const client = await pool.connect();
    const result = await client.query(
      "INSERT INTO blogs (title, description, image_url) VALUES ($1, $2, $3) RETURNING *",
      [title[0], description[0], imageUrl]
    );
    client.release();

    res
      .status(201)
      .json({ message: "تم إنشاء المدونة بنجاح", blog: result.rows[0] });
  } catch (error) {
    console.error("Database error:", error);
    res.status(500).json({ error: "حدث خطأ أثناء إنشاء المدونة" });
  }
}
export const config = {
  api: {
    bodyParser: false, // Disable Vercel's default body parser for multipart data
  },
};



isPayed: 
// reject a session
import pool from "../utils/db.js";
import { requireAdmin } from "../utils/auth.js";
import dotenv from "dotenv";
dotenv.config();
// Allowed origins (update with your domains)
const allowedOrigins = [
  "http://localhost:5173", // Local development
  // Production url
];
export default async function handler(req, res) {
  // Set CORS headers dynamically
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
    res.setHeader("Access-Control-Allow-Credentials", "true");
  }
  res.setHeader("Access-Control-Allow-Methods", "PUT");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  // Handle preflight request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  // First, validate admin status
  try {
    await requireAdmin(req, res);
  } catch (error) {
    if (error.message === "Unauthorized") {
      return res.status(401).json({ error: "Unauthorized" });
    } else if (error.message === "Forbidden") {
      return res.status(403).json({ error: "Forbidden" });
    } else {
      return res.status(500).json({ error: "Internal server error" });
    }
  }

  if (req.method !== "PUT") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  const { userId } = req.body;

  try {
    const client = await pool.connect();
    try {
      await client.query('UPDATE users SET "isPayed" = TRUE WHERE id = $1', [
        userId,
      ]);

      return res
        .status(200)
        .json({ message: "contents unlocked successfully" });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Error unlocking contents:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
}



rejectSession:

// reject a session
import pool from "../utils/db.js";
import { requireAdmin } from "../utils/auth.js";
import dotenv from "dotenv";
dotenv.config();
// Allowed origins (update with your domains)
const allowedOrigins = [
  "http://localhost:5173", // Local development
  // Production url
];
export default async function handler(req, res) {
  // Set CORS headers dynamically
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
    res.setHeader("Access-Control-Allow-Credentials", "true");
  }
  res.setHeader("Access-Control-Allow-Methods", "PUT");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  // Handle preflight request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  // First, validate admin status
  try {
    await requireAdmin(req, res);
  } catch (error) {
    if (error.message === "Unauthorized") {
      return res.status(401).json({ error: "Unauthorized" });
    } else if (error.message === "Forbidden") {
      return res.status(403).json({ error: "Forbidden" });
    } else {
      return res.status(500).json({ error: "Internal server error" });
    }
  }

  if (req.method !== "PUT") {
    return res.status(405).json({ error: "Method not allowed" });
  }
  const { userId } = req.body;

  try {
    const client = await pool.connect();
    try {
      await client.query(
        "UPDATE users SET session_date = NULL, session_time = NULL, status = false WHERE id = $1",
        [userId]
      );

      return res
        .status(200)
        .json({ message: "Session status updated successfully" });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Error updating Session status:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
}

